{
  "name": "matterbridge",
  "version": "3.0.8",
  "description": "Matterbridge plugin manager for Matter",
  "author": "https://github.com/Luligu",
  "license": "Apache-2.0",
  "homepage": "https://github.com/Luligu/matterbridge/blob/main/README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Luligu/matterbridge.git"
  },
  "bugs": {
    "url": "https://github.com/Luligu/matterbridge/issues"
  },
  "funding": {
    "type": "buymeacoffee",
    "url": "https://www.buymeacoffee.com/luligugithub"
  },
  "keywords": [
    "matterbridge",
    "homebridge",
    "bridge",
    "plugin",
    "frontend",
    "matterbridge",
    "matter.js",
    "matter-node.js",
    "matter",
    "matterprotocol",
    "iot",
    "smarthome",
    "connectedthings",
    "hap",
    "homekit",
    "siri",
    "google-home",
    "alexa",
    "homeassistant",
    "smartthings",
    "ewelink"
  ],
  "type": "module",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "bin": {
    "matterbridge": "dist/cli.js"
  },
  "engines": {
    "node": ">=18.0.0 <19.0.0 || >=20.0.0 <21.0.0 || >=22.0.0 <23.0.0 || >=24.0.0 <25.0.0"
  },
  "exports": {
    ".": {
      "import": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./devices": {
      "import": "./dist/devices/export.js",
      "types": "./dist/devices/export.d.ts"
    },
    "./clusters": {
      "import": "./dist/clusters/export.js",
      "types": "./dist/clusters/export.d.ts"
    },
    "./utils": {
      "import": "./dist/utils/export.js",
      "types": "./dist/utils/export.d.ts"
    },
    "./logger": {
      "import": "./dist/logger/export.js",
      "types": "./dist/logger/export.d.ts"
    },
    "./storage": {
      "import": "./dist/storage/export.js",
      "types": "./dist/storage/export.d.ts"
    },
    "./matter": {
      "import": "./dist/matter/export.js",
      "types": "./dist/matter/export.d.ts"
    },
    "./matter/devices": {
      "import": "./dist/matter/devices.js",
      "types": "./dist/matter/devices.d.ts"
    },
    "./matter/clusters": {
      "import": "./dist/matter/clusters.js",
      "types": "./dist/matter/clusters.d.ts"
    },
    "./matter/behaviors": {
      "import": "./dist/matter/behaviors.js",
      "types": "./dist/matter/behaviors.d.ts"
    },
    "./matter/endpoints": {
      "import": "./dist/matter/endpoints.js",
      "types": "./dist/matter/endpoints.d.ts"
    },
    "./matter/types": {
      "import": "./dist/matter/types.js",
      "types": "./dist/matter/types.d.ts"
    }
  },
  "scripts": {
    "build": "tsc",
    "buildProduction": "tsc --project tsconfig.production.json",
    "watch": "tsc --watch",
    "start": "node ./dist/cli.js",
    "start:inspect": "node --inspect=0.0.0.0:9229 ./dist/cli.js -debug",
    "start:bridge": "node ./dist/cli.js -bridge",
    "start:childbridge": "node ./dist/cli.js -childbridge",
    "start:controller": "node ./dist/cli.js -controller",
    "start:edge": "node ./dist/cli.js -edge -debug -logger debug -matterlogger debug",
    "start:help": "node ./dist/cli.js -help",
    "test": "node --no-warnings --experimental-vm-modules node_modules/jest/bin/jest.js --maxWorkers=100%",
    "test:coverage": "node --no-warnings --experimental-vm-modules node_modules/jest/bin/jest.js --coverage --maxWorkers=100%",
    "test:verbose": "node --no-warnings --experimental-vm-modules node_modules/jest/bin/jest.js --verbose --maxWorkers=100%",
    "test:watch": "node --no-warnings --experimental-vm-modules node_modules/jest/bin/jest.js --watch",
    "lint": "eslint --max-warnings=0 .",
    "lint:fix": "eslint --fix --max-warnings=0 .",
    "format": "prettier --write \"**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "format:check": "prettier --check \"**/*.{js,jsx,ts,tsx,json,css,md}\"",
    "clean": "npx rimraf tsconfig.tsbuildinfo ./dist",
    "cleanBuild": "npm run clean && npm run build",
    "cleanBuildProduction": "npm run clean && npm run buildProduction",
    "deepClean": "npx rimraf tsconfig.tsbuildinfo package-lock.json npm-shrinkwrap.json ./dist ./node_modules ./coverage ./test ./matterstorage ./matterstorage.backup",
    "deepCleanBuild": "npm run deepClean && npm install && npm run build && npm link && npx jest --clearCache",
    "runMeBeforePublish": "npm run lint && npm run format && npm run build && npm run test",
    "git:status": "git status && git branch -vv && git diff dev origin/dev",
    "git:hardreset:main": "git fetch origin && git checkout main && git reset --hard origin/main",
    "git:hardreset:dev": "git fetch origin && git checkout dev && git reset --hard origin/dev",
    "git:hardreset:edge": "git fetch origin && git checkout edge && git reset --hard origin/edge",
    "prepublishOnly": "npm pkg delete devDependencies scripts && npm install --omit=dev && npm shrinkwrap",
    "prepublishOnlyProduction": "npm run cleanBuildProduction && npm pkg delete devDependencies scripts types && npx rimraf ./node_modules && npm install --omit=dev && npm shrinkwrap",
    "npmPack": "copy package.json package.log && npm run prepublishOnlyProduction && npm pack && copy package.log package.json && npm run deepCleanBuild",
    "npmPublishTagDev": "copy package.json package.log && npm run prepublishOnlyProduction && npm publish --tag dev && copy package.log package.json && npm run deepCleanBuild",
    "npmPublishTagEdge": "copy package.json package.log && npm run prepublishOnlyProduction && npm publish --tag edge && copy package.log package.json && npm run deepCleanBuild",
    "npmPublishTagLatest": "copy package.json package.log && npm run prepublishOnlyProduction && npm publish --tag latest && copy package.log package.json && npm run deepCleanBuild",
    "checkDependencies": "npx npm-check-updates",
    "updateDependencies": "npx npm-check-updates -u && npm run deepCleanBuild",
    "updateMatter:latest": "npm install @matter/main@latest && npm install && npm run deepCleanBuild",
    "updateMatter:dev": "npm install @matter/main@dev && npm install && npm run deepCleanBuild",
    "updateMatter:loc": "npm install ../matter.js/packages/matter.js && npm install && npm run deepCleanBuild",
    "install:dependencies": "npm install @matter/main archiver express@4.21.2 glob multer node-ansi-logger node-persist-manager ws",
    "install:typescript": "npm install --save-dev @types/express @types/node @types/ws typescript && npm run build",
    "install:eslint": "npm uninstall eslint @types/eslint__js && npm install --save-dev @eslint/js typescript-eslint && npm run lint",
    "install:prettier": "npm install --save-dev prettier eslint-config-prettier eslint-plugin-prettier && npm run format",
    "install:jest": "npm install --save-dev jest ts-jest @types/jest eslint-plugin-jest && npm run test"
  },
  "dependencies": {
    "@matter/main": "0.14.0",
    "archiver": "7.0.1",
    "express": "5.1.0",
    "glob": "11.0.3",
    "multer": "2.0.1",
    "node-ansi-logger": "3.0.1",
    "node-persist-manager": "1.0.8",
    "ws": "8.18.2"
  },
  "devDependencies": {
    "@eslint/js": "9.29.0",
    "@types/archiver": "6.0.3",
    "@types/express": "5.0.3",
    "@types/jest": "29.5.14",
    "@types/multer": "1.4.13",
    "@types/node": "24.0.1",
    "@types/ws": "8.18.1",
    "eslint-config-prettier": "10.1.5",
    "eslint-plugin-jest": "28.13.5",
    "eslint-plugin-n": "17.20.0",
    "eslint-plugin-prettier": "5.4.1",
    "eslint-plugin-react": "7.37.5",
    "eslint-plugin-react-hooks": "5.2.0",
    "jest": "29.7.0",
    "prettier": "3.5.3",
    "ts-jest": "29.4.0",
    "typescript": "5.8.3",
    "typescript-eslint": "8.34.0"
  }
}
