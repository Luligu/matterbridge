# ─────────────── BUILD STAGE ───────────────
FROM ubuntu:latest AS base

# 🛠️ Set noninteractive frontend
ENV DEBIAN_FRONTEND=noninteractive

# Install node from NodeSource
RUN apt update && \
    apt install -y --no-install-recommends ca-certificates curl && \
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt install -y --no-install-recommends nodejs

# Build Matterbridge for production
WORKDIR /matterbridge
COPY ./package.json ./package-lock.json ./tsconfig.json ./tsconfig.production.json ./.npmignore ./
COPY ./src ./src
COPY ./frontend/build ./frontend/build
RUN npm ci && \
    npm run cleanBuildProduction && \
    npm pkg delete devDependencies scripts types && \
    npx rimraf ./node_modules && \
    npm install --omit=dev && \
    npm shrinkwrap && \
    npm pack

# ─────────────── RUNTIME STAGE ───────────────
FROM ubuntu:latest AS release

# Install node from NodeSource
RUN apt update && \
    apt install -y --no-install-recommends ca-certificates curl && \
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt install -y --no-install-recommends nodejs && \
    apt update && apt upgrade -y && \
    apt purge -y apt-transport-https gnupg && \
    apt autoremove -y && \
    apt clean && \
    rm -rf /var/lib/apt/lists/*

# Install Matterbridge
WORKDIR /matterbridge    
COPY --from=base /matterbridge/*.tgz .
RUN npm install npm@latest *.tgz --global --omit=dev && rm *.tgz

# Add Docker HEALTHCHECK
HEALTHCHECK --interval=60s --timeout=10s --start-period=60s --retries=5 \
  CMD curl --fail http://localhost:8283/health || exit 1

# Copy and execute the entrypoint script
COPY ./docker/entrypoint.sh ./
RUN chmod +x ./entrypoint.sh
ENTRYPOINT ["./entrypoint.sh"]
CMD ["matterbridge", "-docker"]
